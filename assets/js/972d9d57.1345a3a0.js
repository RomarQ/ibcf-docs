"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[937],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>f});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),p=l(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,i(i({ref:e},d),{},{components:n})):r.createElement(f,i({ref:e},d))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[p]="string"==typeof t?t:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39880:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905)),a=n(50941),i=n(44996);const c={title:"Introduction",slug:"/",hide_title:!0},s=void 0,l={unversionedId:"introduction",id:"introduction",title:"Introduction",description:"<meta",source:"@site/docs/introduction.mdx",sourceDirName:".",slug:"/",permalink:"/ibcf-docs/",draft:!1,editUrl:"https://github.com/airgap-it/ibcf-docs/docs/introduction.mdx",tags:[],version:"current",frontMatter:{title:"Introduction",slug:"/",hide_title:!0},sidebar:"docs",next:{title:"Overview",permalink:"/ibcf-docs/relay-contracts"}},d={},p=[],u={toc:p};function m(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("head",null,(0,o.kt)("meta",{name:"description",content:"IBCF Documentation - Introduction"})),(0,o.kt)("div",{class:"padding-vert--md"}),(0,o.kt)("h1",{id:"inter-blockchain-communication-framework"},"Inter Blockchain Communication Framework"),(0,o.kt)("p",null,"IBCF is a building block allowing for general bidirectional message passing between Tezos and Ethereum networks."),(0,o.kt)("p",null,"It allows smart contracts on a source chain to store \u2709\ufe0f states that are verifiable on a target chain. It provides a generic way for contracts to communicate between chains by means of validating Merkle proofs about these states stored in the source chain."),(0,o.kt)("h1",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("p",null,"As an initial step, a trusted set of validators is responsible for relaying the state root of snapshots between chains.\nIt means that for two chains  (",(0,o.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),"), that chain ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," will know the state roots of snapshots contained in chain ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", and\nchain ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," will also know the state roots contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,o.kt)("div",{class:"padding-vert--md"}),(0,o.kt)("center",null,(0,o.kt)(a.Z,{width:"480px",sources:{light:(0,i.Z)("/img/ibcf-relay.svg"),dark:(0,i.Z)("/img/ibcf-relay-dark.svg")},mdxType:"ThemedImage"})),(0,o.kt)("div",{class:"padding-vert--md"}),(0,o.kt)("p",null,"The state roots transmitted in the step above allow smart contracts in a target chain to validate arbitrary states previously stored in a source chain by calling a validatior smart contract with a proof-of-inclusion for that given state."),(0,o.kt)("div",{class:"padding-vert--md"}),(0,o.kt)("center",null,(0,o.kt)(a.Z,{width:"520px",sources:{light:(0,i.Z)("/img/ibcf-client-interaction.svg"),dark:(0,i.Z)("/img/ibcf-client-interaction-dark.svg")},mdxType:"ThemedImage"})))}m.isMDXComponent=!0}}]);